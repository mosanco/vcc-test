version: "3.5"
services:
 revproxy:
   # https://hub.docker.com/_/traefik
   hostname: revproxy
   image: traefik:v2.2
   command:
    - "--api.insecure=true"
    - "--api.dashboard=true"
    - "--providers.docker=true"
    - "--providers.docker.swarmMode=true"
    - "--providers.docker.exposedbydefault=false"
    - "--entrypoints.web.address=:80"
    - "--entrypoints.websecure.address=:443"
    - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
    - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
    - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
   ports:
    - "80:80"
    - "8080:8080"
    - "443:443"
   volumes:
     - /var/run/docker.sock:/var/run/docker.sock:ro
   depends_on:
    - waf
    - pmy
    - cms
   # it is the only service connected to the external network
   networks:
     intnet: {}
     extnet:
       ipv4_address: 192.168.100.2
   deploy:
    mode: global
    placement:
     constraints:
      - node.role == manager

 pmy:
  image: phpmyadmin
  container_name: pmy
  hostname: pmy
  depends_on:
   - db
   - logstash
  # a mechanism for applying metadata to Docker objects
  logging:
    driver: gelf
    options:
      gelf-address: "udp://127.0.0.1:12201" #o logstash
  networks:
   - intnet
  deploy:
   mode: global
   labels:
    - "traefik.enable=true"
    - "traefik.http.routers.pmy.rule=Host(`pmy.localdomain`)"
    - "traefik.http.routers.pmy.entrypoints=websecure"
    - "traefik.http.routers.pmy.tls=true"
    - "traefik.http.services.pmy.loadbalancer.server.port=80"
    - "traefik.http.services.pmy.loadbalancer.sticky=true"
    - "traefik.http.services.pmy.loadbalancer.sticky.cookie.name=PmyCookie"

 waf:
  #build:
   #context: ./
   #dockerfile: Dockerfile-nginx.yaml
  image: owasp/modsecurity:3
  volumes:
   - /data/waf/etc/nginx/default.conf:/etc/nginx/conf.d/default.conf
  hostname: waf
  depends_on:
   - cms
   - pmy
   - db
   - logstash
  #environment:
   #MODSEC_AUDIT_ENGINE: "On"
   #MODSEC_AUDIT_LOG: /etc/audit-log.log
  logging:
    driver: gelf
    options:
      gelf-address: "udp://127.0.0.1:12201" #o logstash
  # a mechanism for applying metadata to Docker objects
  deploy:
   mode: global
   labels:
    - "traefik.enable=true"
    - "traefik.http.routers.cms.rule=Host(`www.localdomain`)"
    - "traefik.http.routers.cms.entrypoints=websecure"
    - "traefik.http.routers.cms.tls=true"
    - "traefik.http.services.cms.loadbalancer.server.port=80"
    - "traefik.http.services.cms.loadbalancer.sticky=true"
    - "traefik.http.services.cms.loadbalancer.sticky.cookie.name=CmsCookie"
  #ports:
  #  - "2020:80"
  networks:
   intnet: {}
   extnet: 
    ipv4_address: 192.168.100.3

 cms:
  build: 
   context: ./drupal/
   dockerfile: Dockerfile-drupal.yaml
  image: 127.0.0.1:5000/cms
  hostname: cms
  entrypoint: 
   ["wait-for-it", "-t", "120", "db:3306", "--", "/usr/local/bin/entrypoint.sh"]
  environment:
   DB_HOST: db
   DB_NAME: drupal
   DB_USER: drupal
   DB_PASSWORD: drupal123
   DRUPAL_ADMIN_PASS: admin
  depends_on:
   - db
   - logstash
  logging:
    driver: gelf
    options:
      gelf-address: "udp://127.0.0.1:12201" #o logstash
      
  volumes:
   #- cms-config:/config
   - /data/cms/html/modules:/var/www/html/modules
   - /data/cms/html/profiles:/var/www/html/profiles
   - /data/cms/html/sites:/var/www/html/sites
   - /data/cms/html/themes:/var/www/html/themes
  ports:
   - "8081:80"
  networks:
   - extnet
   - intnet
  deploy:
   mode: global

 db:
  image: mariadb
  hostname: db
  depends_on:
   - logstash
   
  environment:
   # cf. https://hub.docker.com/_/mariadb
   MYSQL_ROOT_PASSWORD: secret
   MYSQL_DATABASE: drupal
   MYSQL_USER: drupal
   MYSQL_PASSWORD: drupal123
  networks:
   - intnet
  deploy:
   mode: global
   placement:
    constraints:
     - node.role == manager

#volumes:
#  cms-config: 

 elasticsearch:
   image: elasticsearch:2
   networks:
    intnet: {}
   deploy:
    mode: global
    placement:
     constraints:
      - node.role == manager

 logstash:
   image: logstash:2
   command: |
     -e '
     input {
       gelf { }
       heartbeat { }
     }
     filter {
       ruby {
         code => "
           event.to_hash.keys.each { |k| event[ k.gsub('"'.'"','"'_'"') ] = event.remove(k) if k.include?'"'.'"' }
         "
       }
     }
     output {
       elasticsearch {
         hosts => ["elasticsearch:9200"]
       }
       stdout {
         codec => rubydebug
       }
     }'
   ports:
     - "12201:12201/udp"
   networks:
    intnet: {}
   deploy:
    mode: replicated
    replicas: 1

 kibana:
   image: kibana:4
   #ports:
    # - "5601:5601"
   environment:
     ELASTICSEARCH_URL: http://elasticsearch:9200
   networks:
    intnet: {}
   deploy:
    mode: replicated
    replicas: 1
    labels:
     - "traefik.enable=true"
     - "traefik.http.routers.mon.rule=Host(`mon.localdomain`)"
     - "traefik.http.routers.mon.entrypoints=websecure"
     - "traefik.http.routers.mon.tls=true"
     - "traefik.http.services.mon.loadbalancer.server.port=5601"
     - "traefik.http.services.mon.loadbalancer.sticky=true"
     - "traefik.http.services.mon.loadbalancer.sticky.cookie.name=MonCookie"
     - traefik.port=5601

# filebeat:
#  image: "docker.elastic.co/beats/filebeat:7.12.0"
#  user: root
#  volumes:
#   - /data/filebeat/filebeat-conf.yml:/usr/share/filebeat/filebeat.yml:ro
#   - /var/lib/docker:/var/lib/docker:ro
#   - /var/run/docker.sock:/var/run/docker.sock
#  networks:
#   - intnet
#  deploy:
#   mode: global

networks:
 intnet:
  #driver: bridge
  ipam:
   #driver: default
   config:
    - subnet: 192.168.200.0/24

 extnet:
  #driver: bridge
  ipam:
   #driver: default
   config:
    - subnet: 192.168.100.0/24

